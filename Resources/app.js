// Generated by CoffeeScript 1.3.3
(function() {
  var addTask, contexts, displayTasks, getCounts, init, loadTasks, parseTask, projects, removeTask, saveTasks, tags, tasks, todo_txt_dir;

  this.TodoCtrl = function($scope) {
    return $scope.todoText = 'testing';
  };

  todo_txt_dir = '/Users/eli/Documents/todo';

  tasks = null;

  contexts = null;

  projects = null;

  tags = null;

  init = function() {
    var exitItem, fileItem, menu;
    menu = Ti.UI.createMenu();
    fileItem = Ti.UI.createMenuItem('File');
    exitItem = fileItem.addItem('Exit', function() {
      if (confirm('Are you sure you want to quit?')) {
        return Ti.App.exit();
      }
    });
    menu.appendItem(fileItem);
    Ti.UI.setMenu(menu);
    loadTasks();
    return displayTasks();
  };

  displayTasks = function() {
    var c, cContexts, cProjects, cTags, html, row, sTasks, t, uContexts, uProjects, uTags, _i, _j, _k, _l, _len, _len1, _len2, _len3, _results;
    $('#tasks').empty();
    sTasks = _.sortBy(tasks, function(t) {
      return t.raw;
    });
    row = 1;
    for (_i = 0, _len = sTasks.length; _i < _len; _i++) {
      t = sTasks[_i];
      html = "			<div class='task' id='task-" + t.id + "'>				<input type='checkbox' class='task-cb' id='task-cb-" + t.id + "'>				" + t.raw + "			</div>		";
      $('#tasks').append(html);
      row++;
    }
    $('#contexts').empty();
    cContexts = getCounts(contexts);
    uContexts = _.uniq(contexts).sort();
    for (_j = 0, _len1 = uContexts.length; _j < _len1; _j++) {
      c = uContexts[_j];
      html = "			<div class='context sb-item' id='context-" + c + "'>				" + c + " " + cContexts[c] + "			</div>		";
      $('#contexts').append(html);
    }
    $('#projects').empty();
    cProjects = getCounts(projects);
    uProjects = _.uniq(projects).sort();
    for (_k = 0, _len2 = uProjects.length; _k < _len2; _k++) {
      c = uProjects[_k];
      html = "			<div class='project sb-item' id='project-" + c + "'>				" + c + " " + cProjects[c] + "			</div>		";
      $('#projects').append(html);
    }
    $('#tags').empty();
    cTags = getCounts(tags);
    uTags = _.uniq(tags).sort();
    _results = [];
    for (_l = 0, _len3 = uTags.length; _l < _len3; _l++) {
      c = uTags[_l];
      html = "			<div class='tag sb-item' id='tag-" + c + "'>				" + c + " " + cTags[c] + "			</div>		";
      _results.push($('#tags').append(html));
    }
    return _results;
  };

  loadTasks = function() {
    var d, fs, line, lineNum;
    tasks = new Array();
    contexts = new Array();
    projects = new Array();
    tags = new Array();
    d = Ti.Filesystem.getFile(todo_txt_dir, 'todo.txt');
    fs = d.open();
    line = fs.readLine();
    lineNum = 1;
    while (line) {
      parseTask(lineNum, line);
      line = fs.readLine();
      lineNum++;
    }
    return fs.close();
  };

  parseTask = function(lineNum, task) {
    var c, cats, p, priority, pros, t, ts, _i, _j, _k, _len, _len1, _len2;
    t = '' + task;
    cats = t.match(/@\w+/g);
    if (cats) {
      for (_i = 0, _len = cats.length; _i < _len; _i++) {
        c = cats[_i];
        contexts.push(c);
      }
    }
    ts = t.match(/#\w+/g);
    if (ts) {
      for (_j = 0, _len1 = ts.length; _j < _len1; _j++) {
        t = ts[_j];
        tags.push(t);
      }
    }
    pros = t.match(/\+\w+/g);
    if (pros) {
      for (_k = 0, _len2 = pros.length; _k < _len2; _k++) {
        p = pros[_k];
        projects.push(p);
      }
    }
    priority = t.match(/\([A-Z]\)/);
    return tasks.push({
      id: lineNum,
      raw: task,
      priority: priority
    });
  };

  saveTasks = function() {
    var d, fs, t, _i, _len;
    d = Ti.Filesystem.getFile(todo_txt_dir, 'todo.txt');
    fs = d.open(Ti.Filesystem.MODE_WRITE);
    for (_i = 0, _len = tasks.length; _i < _len; _i++) {
      t = tasks[_i];
      if (t.raw && t.raw.length > 0) {
        fs.write(t.raw + '\n');
      }
    }
    return fs.close();
  };

  addTask = function(taskText) {
    if (taskText.length > 0) {
      $("#add").val('');
      tasks.push({
        raw: taskText
      });
      saveTasks();
      loadTasks();
      return displayTasks();
    }
  };

  removeTask = function(id) {
    return alert(id);
  };

  getCounts = function(list) {
    var c, cList, _i, _len;
    cList = {};
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      c = list[_i];
      if (!cList[c]) {
        cList[c] = 0;
      }
      ++cList[c];
    }
    return cList;
  };

  init();

}).call(this);
